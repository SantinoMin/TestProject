plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
}

group = 'demo'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //임시로 주석처리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

//    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.6'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // DB

//    // Swagger 사용 의존성
//    implementation 'io.springfox:springfox-swagger2:2.9.2'
//    implementation 'io.springfox:springfox-swagger-ui:2.9.2'

    //MYSQL
    implementation 'com.mysql:mysql-connector-j'

    //임시로 주석처리
    runtimeOnly 'mysql:mysql-connector-java'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    // SMS
//    implementation "com.twilio.sdk:twilio:9.10.0"
    implementation "com.twilio.sdk:twilio:10.1.1"

    // EMAIL
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    // TEST
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4' // JUnit 5와 함께 사용할 경우

    // JWT 3개 다 implementation으로 설정하기.
//    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
//    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

}



tasks.named('test') {
    useJUnitPlatform()
}
